{"ast":null,"code":"import _slicedToArray from\"/Users/admin/Documents/Attach/Web/viivakoodi/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useRef,useEffect}from'react';import'bootstrap/dist/css/bootstrap.min.css';import FinnishBankUtils from'finnish-bank-utils';// Make sure this import is correct\nimport Barcode from'react-barcode';import DatePicker from'react-datepicker';import'react-datepicker/dist/react-datepicker.css';import{format}from'date-fns';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function IbanForm(){// Initialize states with empty values for user input\nvar _useState=useState(localStorage.getItem('iban')||''),_useState2=_slicedToArray(_useState,2),iban=_useState2[0],setIban=_useState2[1];var _useState3=useState(localStorage.getItem('sum')||''),_useState4=_slicedToArray(_useState3,2),sum=_useState4[0],setSum=_useState4[1];var _useState5=useState(localStorage.getItem('dueDate')?new Date(localStorage.getItem('dueDate')):new Date()),_useState6=_slicedToArray(_useState5,2),dueDate=_useState6[0],setDueDate=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),validationState=_useState8[0],setValidationState=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),barcode=_useState10[0],setBarcode=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),error=_useState12[0],setError=_useState12[1];var barcodeRef=useRef(null);var referenceNumber='55958 22432 94671';// Example of a hard-coded valid reference number\nuseEffect(function(){// Save input field values to localStorage whenever they change\nlocalStorage.setItem('iban',iban);localStorage.setItem('sum',sum);localStorage.setItem('dueDate',dueDate.toISOString());},[iban,sum,dueDate]);var handleDateChange=function handleDateChange(date){setDueDate(date);};var copyToClipboard=function copyToClipboard(e){barcodeRef.current.select();document.execCommand('copy');e.target.focus();// Optionally, you can show a tooltip/popover to indicate the text was copied.\n};var handleIbanChange=function handleIbanChange(e){var input=e.target.value;// Only keep alphanumeric characters and spaces (for better user experience)\nvar value=input.replace(/[^A-Za-z0-9 ]/g,'');// Split the value into groups of 4 characters separated by spaces\nvar match=value.split(' ').join('').match(/.{1,4}/g);var formattedValue=match?match.join(' '):'';// Check if we should trigger validation. We do this by counting the actual characters entered,\n// ignoring spaces, to know when the user has entered a complete IBAN.\nvar actualLength=formattedValue.replace(/ /g,'').length;setIban(formattedValue);setError('');// Clear any previous errors\nif(actualLength===18){// Checking the length of the IBAN without spaces\nvalidateIban(formattedValue);// You could validate the IBAN here\n}else{setValidationState('');// Reset validation state if the length requirement is not met\n}};var validateIban=function validateIban(iban){// Implement your validation logic here\nvar isValidIban=FinnishBankUtils.isValidFinnishIBAN(iban.replace(/\\s/g,''));// validation without spaces\nsetValidationState(isValidIban?'is-valid':'is-invalid');};var validateAndGenerateBarcode=function validateAndGenerateBarcode(){var parsedSum=parseFloat(sum);if(isNaN(parsedSum)){setError('Invalid sum. Please provide a numeric value.');return;}// Format the date in the format \"dd.MM.yyyy\"\nvar formattedDate=format(dueDate,'dd.MM.yyyy');// Generate barcode\ntry{var generatedBarcode=FinnishBankUtils.formatFinnishVirtualBarCode({iban:iban,sum:parsedSum,reference:referenceNumber,date:formattedDate// pass the formatted date string here instead of the Date object\n});setBarcode(generatedBarcode);}catch(error){console.error(\"Error generating barcode:\",error);setError('There was an error generating the barcode. Please check your inputs and try again.');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container mt-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"ibanField\",className:\"form-label\",children:\"Tilinumero\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control \".concat(validationState),id:\"ibanField\",value:iban,onChange:handleIbanChange,placeholder:\"FI29 1220 3500 6578 75\",maxLength:\"22\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sumField\",className:\"form-label\",children:\"Summa\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",className:\"form-control\",id:\"sumField\",value:sum,onChange:function onChange(e){return setSum(e.target.valueAsNumber||'');}// Ensuring we're working with a number, and prevent null on deletion\n,placeholder:\"12.50\",min:\"0\"// Prevents negative amounts\n,step:\"0.01\"// Allows cents to be entered\n,pattern:\"\\\\d+(\\\\.\\\\d{2})?\"// This pattern demands at least the cents part to be entered, you can remove it if you want more flexibility\n,inputMode:\"decimal\"// Brings up the numeric keypad on supported devices, useful for monetary values\n,maxLength:\"6\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dueDateField\",className:\"form-label\",children:\"Er\\xE4p\\xE4iv\\xE4\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(DatePicker,{selected:dueDate,onChange:handleDateChange,dateFormat:\"dd.MM.yyyy\",className:\"form-control\",id:\"dueDateField\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-3\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:validateAndGenerateBarcode,children:\"Luo Viivakoodi\"})}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-danger\",role:\"alert\",children:error}),barcode&&/*#__PURE__*/_jsxs(\"div\",{className:\"input-group mb-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",ref:barcodeRef,value:barcode,className:\"form-control\",readOnly:true}),/*#__PURE__*/_jsx(\"div\",{className:\"input-group-append\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-outline-secondary\",type:\"button\",onClick:copyToClipboard,\"data-toggle\":\"tooltip\",\"data-placement\":\"top\",title:\"Copy to Clipboard\",children:\"Copy\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-3\",children:/*#__PURE__*/_jsx(\"div\",{className:\"barcode-container\",children:/*#__PURE__*/_jsx(Barcode,{value:barcode,format:\"CODE128\"})})})]})]});}export default IbanForm;","map":{"version":3,"names":["React","useState","useRef","useEffect","FinnishBankUtils","Barcode","DatePicker","format","jsx","_jsx","jsxs","_jsxs","IbanForm","_useState","localStorage","getItem","_useState2","_slicedToArray","iban","setIban","_useState3","_useState4","sum","setSum","_useState5","Date","_useState6","dueDate","setDueDate","_useState7","_useState8","validationState","setValidationState","_useState9","_useState10","barcode","setBarcode","_useState11","_useState12","error","setError","barcodeRef","referenceNumber","setItem","toISOString","handleDateChange","date","copyToClipboard","e","current","select","document","execCommand","target","focus","handleIbanChange","input","value","replace","match","split","join","formattedValue","actualLength","length","validateIban","isValidIban","isValidFinnishIBAN","validateAndGenerateBarcode","parsedSum","parseFloat","isNaN","formattedDate","generatedBarcode","formatFinnishVirtualBarCode","reference","console","className","children","htmlFor","type","concat","id","onChange","placeholder","maxLength","valueAsNumber","min","step","pattern","inputMode","selected","dateFormat","onClick","role","ref","readOnly","title"],"sources":["/Users/admin/Documents/Attach/Web/viivakoodi/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport Barcode from 'react-barcode';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { format } from 'date-fns';\nimport './App.css';\n\n\nfunction IbanForm() {\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState(localStorage.getItem('iban') || '');\n  const [sum, setSum] = useState(localStorage.getItem('sum') || '');\n  const [dueDate, setDueDate] = useState(\n    localStorage.getItem('dueDate')\n      ? new Date(localStorage.getItem('dueDate'))\n      : new Date()\n  );  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n  const barcodeRef = useRef(null);\n  const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n  useEffect(() => {\n    // Save input field values to localStorage whenever they change\n    localStorage.setItem('iban', iban);\n    localStorage.setItem('sum', sum);\n    localStorage.setItem('dueDate', dueDate.toISOString());\n  }, [iban, sum, dueDate]);\n\n\n  const handleDateChange = (date) => {\n    setDueDate(date);\n  };\n\n\n  const copyToClipboard = (e) => {\n    barcodeRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    // Optionally, you can show a tooltip/popover to indicate the text was copied.\n  };\n\n  const handleIbanChange = (e) => {\n    const input = e.target.value;\n    // Only keep alphanumeric characters and spaces (for better user experience)\n    let value = input.replace(/[^A-Za-z0-9 ]/g, '');\n  \n    // Split the value into groups of 4 characters separated by spaces\n    const match = value.split(' ').join('').match(/.{1,4}/g);\n    \n    let formattedValue = match ? match.join(' ') : '';\n  \n    // Check if we should trigger validation. We do this by counting the actual characters entered,\n    // ignoring spaces, to know when the user has entered a complete IBAN.\n    const actualLength = formattedValue.replace(/ /g, '').length;\n  \n    setIban(formattedValue);\n    setError(''); // Clear any previous errors\n  \n    if (actualLength === 18) { // Checking the length of the IBAN without spaces\n      validateIban(formattedValue); // You could validate the IBAN here\n    } else {\n      setValidationState(''); // Reset validation state if the length requirement is not met\n    }\n  };\n  \n  \n  \n  const validateIban = (iban) => {\n    // Implement your validation logic here\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban.replace(/\\s/g, '')); // validation without spaces\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n  \n   \n  };\n  \n\n  const validateAndGenerateBarcode = () => {\n  \n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n  \n    // Format the date in the format \"dd.MM.yyyy\"\n    const formattedDate = format(dueDate, 'dd.MM.yyyy');\n  \n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: formattedDate, // pass the formatted date string here instead of the Date object\n      });\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n\n\n  return (\n    \n    <div className=\"container mt-5\">\n      \n<div className=\"mb-3\">\n  <label htmlFor=\"ibanField\" className=\"form-label\">Tilinumero</label>\n  <input \n    type=\"text\"\n    className={`form-control ${validationState}`}\n    id=\"ibanField\"\n    value={iban}\n    onChange={handleIbanChange}\n    placeholder=\"FI29 1220 3500 6578 75\"\n    maxLength=\"22\" \n  />\n</div>\n      <div className=\"mb-3\">\n  <label htmlFor=\"sumField\" className=\"form-label\">Summa</label>\n  <input \n    type=\"number\" \n    className=\"form-control\"\n    id=\"sumField\"\n    value={sum}\n    onChange={(e) => setSum(e.target.valueAsNumber || '')} // Ensuring we're working with a number, and prevent null on deletion\n    placeholder=\"12.50\"\n    min=\"0\" // Prevents negative amounts\n    step=\"0.01\" // Allows cents to be entered\n    pattern=\"\\d+(\\.\\d{2})?\" // This pattern demands at least the cents part to be entered, you can remove it if you want more flexibility\n    inputMode=\"decimal\" // Brings up the numeric keypad on supported devices, useful for monetary values\n    maxLength=\"6\" \n\n  />\n</div>\n<div className=\"mb-3\">\n  <label htmlFor=\"dueDateField\" className=\"form-label\">Eräpäivä</label>\n  <br />\n  <DatePicker\n    selected={dueDate}\n    onChange={handleDateChange}\n    dateFormat=\"dd.MM.yyyy\"\n    className=\"form-control\"\n    id=\"dueDateField\"\n  />\n</div>\n      <div className=\"mb-3\">\n        <button \n          className=\"btn btn-primary\" \n          onClick={validateAndGenerateBarcode}\n        >\n          Luo Viivakoodi\n        </button>\n      </div>\n  \n      {error && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n  \n  {barcode && (\n    \n        <div className=\"input-group mb-3\">\n          <input \n            type=\"text\"\n            ref={barcodeRef}\n            value={barcode}\n            className=\"form-control\"\n            readOnly\n          />\n  <div className=\"input-group-append\">\n  <button\n  className=\"btn btn-outline-secondary\"\n  type=\"button\"\n  onClick={copyToClipboard}\n  data-toggle=\"tooltip\"\n  data-placement=\"top\"\n  title=\"Copy to Clipboard\"\n>\n  Copy\n</button>\n  </div>\n          <div className=\"mb-3\">\n          <div className=\"barcode-container\">\n          <Barcode value={barcode} format=\"CODE128\" />\n          </div>\n\n        </div>\n        </div>\n        \n      )}\n    </div>\n  );\n  \n}\n\nexport default IbanForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}