{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport Barcode from 'react-barcode';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IbanForm() {\n  _s();\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState('');\n  const [sum, setSum] = useState('');\n  const [dueDate, setDueDate] = useState(new Date()); // now dueDate contains today's date\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n  const barcodeRef = useRef(null);\n  const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n  const handleDateChange = date => {\n    setDueDate(date);\n  };\n  const copyToClipboard = e => {\n    barcodeRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    // Optionally, you can show a tooltip/popover to indicate the text was copied.\n  };\n\n  const handleIbanChange = e => {\n    // Get the value the user typed and remove any existing whitespace.\n    const input = e.target.value.replace(/\\s/g, '').toUpperCase();\n\n    // Split the input into an array of characters.\n    const characters = input.split('');\n\n    // Initialize an empty array to hold the formatted characters.\n    let formattedCharacters = [];\n\n    // Iterate over the array of characters.\n    for (let i = 0; i < characters.length; i++) {\n      // Add the current character to the formattedCharacters array.\n      formattedCharacters.push(characters[i]);\n\n      // Check if it's time to add a space.\n      // We want to add a space after every set of four characters,\n      // but we also check if we're not at the end of the input to avoid adding a trailing space.\n      if ((i + 1) % 4 === 0 && i + 1 !== characters.length) {\n        formattedCharacters.push(' ');\n      }\n    }\n\n    // Join the formattedCharacters array into a string and set it as the new value.\n    const formattedValue = formattedCharacters.join('');\n\n    // Set the state with the new formatted value.\n    setIban(formattedValue);\n\n    // You could trigger validation or other side effects here.\n    // For example, if the length indicates a potentially complete IBAN, you could validate it.\n    const pureIbanLength = formattedValue.replace(/\\s/g, '').length;\n    if (pureIbanLength === 18) {\n      // Or any other appropriate condition for your use case.\n      validateIban(formattedValue);\n    } else {\n      setError(''); // Clear any previous errors if the IBAN isn't complete yet.\n      setValidationState(''); // Reset validation state if the IBAN isn't complete yet.\n    }\n  };\n\n  const validateIban = iban => {\n    // Implement your validation logic here\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban.replace(/\\s/g, '')); // validation without spaces\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n    if (!isValidIban) {\n      setError('Invalid IBAN');\n    }\n  };\n  const validateAndGenerateBarcode = () => {\n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n\n    // Format the date in the format \"dd.MM.yyyy\"\n    const formattedDate = format(dueDate, 'dd.MM.yyyy');\n\n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: formattedDate // pass the formatted date string here instead of the Date object\n      });\n\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ibanField\",\n        className: \"form-label\",\n        children: \"IBAN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `form-control ${validationState}`,\n        id: \"ibanField\",\n        value: iban,\n        onChange: handleIbanChange,\n        placeholder: \"Enter IBAN\",\n        maxLength: \"22\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 3\n      }, this), validationState === 'is-invalid' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invalid-feedback\",\n        children: \"Invalid IBAN.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sumField\",\n        className: \"form-label\",\n        children: \"Amount (\\u20AC)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        id: \"sumField\",\n        value: sum,\n        onChange: e => setSum(e.target.valueAsNumber || '') // Ensuring we're working with a number, and prevent null on deletion\n        ,\n        placeholder: \"Enter amount in EUR\",\n        min: \"0\" // Prevents negative amounts\n        ,\n        step: \"0.01\" // Allows cents to be entered\n        ,\n        pattern: \"\\\\d+(\\\\.\\\\d{2})?\" // This pattern demands at least the cents part to be entered, you can remove it if you want more flexibility\n        ,\n        inputMode: \"decimal\" // Brings up the numeric keypad on supported devices, useful for monetary values\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"dueDateField\",\n        className: \"form-label\",\n        children: \"Due Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: dueDate,\n        onChange: handleDateChange,\n        dateFormat: \"dd.MM.yyyy\",\n        className: \"form-control\",\n        id: \"dueDateField\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: validateAndGenerateBarcode,\n        children: \"Generate Barcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), barcode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: barcodeRef,\n        value: barcode,\n        className: \"form-control\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-secondary\",\n        type: \"button\",\n        onClick: copyToClipboard,\n        children: \"Copy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"barCode\",\n          className: \"form-label\",\n          children: \"Barcode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Barcode, {\n          value: barcode,\n          format: \"CODE128\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(IbanForm, \"E2Zn7wnnpUXKx81S6yBoGRyYJBo=\");\n_c = IbanForm;\nexport default IbanForm;\nvar _c;\n$RefreshReg$(_c, \"IbanForm\");","map":{"version":3,"names":["React","useState","useRef","FinnishBankUtils","Barcode","DatePicker","format","jsxDEV","_jsxDEV","IbanForm","_s","iban","setIban","sum","setSum","dueDate","setDueDate","Date","validationState","setValidationState","barcode","setBarcode","error","setError","barcodeRef","referenceNumber","handleDateChange","date","copyToClipboard","e","current","select","document","execCommand","target","focus","handleIbanChange","input","value","replace","toUpperCase","characters","split","formattedCharacters","i","length","push","formattedValue","join","pureIbanLength","validateIban","isValidIban","isValidFinnishIBAN","validateAndGenerateBarcode","parsedSum","parseFloat","isNaN","formattedDate","generatedBarcode","formatFinnishVirtualBarCode","reference","console","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","maxLength","valueAsNumber","min","step","pattern","inputMode","selected","dateFormat","onClick","role","ref","readOnly","_c","$RefreshReg$"],"sources":["/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport Barcode from 'react-barcode';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { format } from 'date-fns';\n\n\nfunction IbanForm() {\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState('');\n  const [sum, setSum] = useState('');\n  const [dueDate, setDueDate] = useState(new Date()); // now dueDate contains today's date\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n  const barcodeRef = useRef(null);\n  const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n\n\n  const handleDateChange = (date) => {\n    setDueDate(date);\n  };\n\n\n  const copyToClipboard = (e) => {\n    barcodeRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    // Optionally, you can show a tooltip/popover to indicate the text was copied.\n  };\n\n  const handleIbanChange = (e) => {\n    // Get the value the user typed and remove any existing whitespace.\n    const input = e.target.value.replace(/\\s/g, '').toUpperCase();\n\n    // Split the input into an array of characters.\n    const characters = input.split('');\n\n    // Initialize an empty array to hold the formatted characters.\n    let formattedCharacters = [];\n\n    // Iterate over the array of characters.\n    for (let i = 0; i < characters.length; i++) {\n        // Add the current character to the formattedCharacters array.\n        formattedCharacters.push(characters[i]);\n\n        // Check if it's time to add a space.\n        // We want to add a space after every set of four characters,\n        // but we also check if we're not at the end of the input to avoid adding a trailing space.\n        if ((i + 1) % 4 === 0 && i + 1 !== characters.length) {\n            formattedCharacters.push(' ');\n        }\n    }\n\n    // Join the formattedCharacters array into a string and set it as the new value.\n    const formattedValue = formattedCharacters.join('');\n\n    // Set the state with the new formatted value.\n    setIban(formattedValue);\n\n    // You could trigger validation or other side effects here.\n    // For example, if the length indicates a potentially complete IBAN, you could validate it.\n    const pureIbanLength = formattedValue.replace(/\\s/g, '').length;\n    if (pureIbanLength === 18) { // Or any other appropriate condition for your use case.\n        validateIban(formattedValue);\n    } else {\n        setError(''); // Clear any previous errors if the IBAN isn't complete yet.\n        setValidationState(''); // Reset validation state if the IBAN isn't complete yet.\n    }\n};\n\n  \n  \n  \n  \n  \n  const validateIban = (iban) => {\n    // Implement your validation logic here\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban.replace(/\\s/g, '')); // validation without spaces\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n  \n    if (!isValidIban) {\n      setError('Invalid IBAN');\n    }\n  };\n  \n\n  const validateAndGenerateBarcode = () => {\n  \n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n  \n    // Format the date in the format \"dd.MM.yyyy\"\n    const formattedDate = format(dueDate, 'dd.MM.yyyy');\n  \n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: formattedDate, // pass the formatted date string here instead of the Date object\n      });\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n\n\n  return (\n    <div className=\"container mt-5\">\n<div className=\"mb-3\">\n  <label htmlFor=\"ibanField\" className=\"form-label\">IBAN</label>\n  <input \n    type=\"text\"\n    className={`form-control ${validationState}`}\n    id=\"ibanField\"\n    value={iban}\n    onChange={handleIbanChange}\n    placeholder=\"Enter IBAN\"\n    maxLength=\"22\" \n  />\n  {validationState === 'is-invalid' && <div className=\"invalid-feedback\">Invalid IBAN.</div>}\n</div>\n      <div className=\"mb-3\">\n  <label htmlFor=\"sumField\" className=\"form-label\">Amount (€)</label>\n  <input \n    type=\"number\" \n    className=\"form-control\"\n    id=\"sumField\"\n    value={sum}\n    onChange={(e) => setSum(e.target.valueAsNumber || '')} // Ensuring we're working with a number, and prevent null on deletion\n    placeholder=\"Enter amount in EUR\"\n    min=\"0\" // Prevents negative amounts\n    step=\"0.01\" // Allows cents to be entered\n    pattern=\"\\d+(\\.\\d{2})?\" // This pattern demands at least the cents part to be entered, you can remove it if you want more flexibility\n    inputMode=\"decimal\" // Brings up the numeric keypad on supported devices, useful for monetary values\n  />\n</div>\n<div className=\"mb-3\">\n  <label htmlFor=\"dueDateField\" className=\"form-label\">Due Date</label>\n  <br />\n  <DatePicker\n    selected={dueDate}\n    onChange={handleDateChange}\n    dateFormat=\"dd.MM.yyyy\"\n    className=\"form-control\"\n    id=\"dueDateField\"\n  />\n</div>\n      <div className=\"mb-3\">\n        <button \n          className=\"btn btn-primary\" \n          onClick={validateAndGenerateBarcode}\n        >\n          Generate Barcode\n        </button>\n      </div>\n  \n      {error && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n  \n  {barcode && (\n    \n        <div className=\"input-group mb-3\">\n          <input \n            type=\"text\"\n            ref={barcodeRef}\n            value={barcode}\n            className=\"form-control\"\n            readOnly\n          />\n          <button \n            className=\"btn btn-outline-secondary\" \n            type=\"button\" \n            onClick={copyToClipboard}\n          >\n            Copy\n          </button>\n          <div className=\"mb-3\">\n          <label htmlFor=\"barCode\" className=\"form-label\">Barcode</label>\n\n          <Barcode value={barcode} format=\"CODE128\" />\n        </div>\n        </div>\n        \n      )}\n    </div>\n  );\n  \n}\n\nexport default IbanForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,sCAAsC;AAC7C,OAAOC,gBAAgB,MAAM,oBAAoB,CAAC,CAAC;AACnD,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AACnD,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,GAAG,EAAEC,MAAM,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMuB,UAAU,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMuB,eAAe,GAAG,mBAAmB,CAAC,CAAC;;EAI7C,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjCX,UAAU,CAACW,IAAI,CAAC;EAClB,CAAC;EAGD,MAAMC,eAAe,GAAIC,CAAC,IAAK;IAC7BL,UAAU,CAACM,OAAO,CAACC,MAAM,CAAC,CAAC;IAC3BC,QAAQ,CAACC,WAAW,CAAC,MAAM,CAAC;IAC5BJ,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;;EAED,MAAMC,gBAAgB,GAAIP,CAAC,IAAK;IAC9B;IACA,MAAMQ,KAAK,GAAGR,CAAC,CAACK,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;;IAE7D;IACA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,KAAK,CAAC,EAAE,CAAC;;IAElC;IACA,IAAIC,mBAAmB,GAAG,EAAE;;IAE5B;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC;MACAD,mBAAmB,CAACG,IAAI,CAACL,UAAU,CAACG,CAAC,CAAC,CAAC;;MAEvC;MACA;MACA;MACA,IAAI,CAACA,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAG,CAAC,KAAKH,UAAU,CAACI,MAAM,EAAE;QAClDF,mBAAmB,CAACG,IAAI,CAAC,GAAG,CAAC;MACjC;IACJ;;IAEA;IACA,MAAMC,cAAc,GAAGJ,mBAAmB,CAACK,IAAI,CAAC,EAAE,CAAC;;IAEnD;IACApC,OAAO,CAACmC,cAAc,CAAC;;IAEvB;IACA;IACA,MAAME,cAAc,GAAGF,cAAc,CAACR,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACM,MAAM;IAC/D,IAAII,cAAc,KAAK,EAAE,EAAE;MAAE;MACzBC,YAAY,CAACH,cAAc,CAAC;IAChC,CAAC,MAAM;MACHxB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MACdJ,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B;EACJ,CAAC;;EAOC,MAAM+B,YAAY,GAAIvC,IAAI,IAAK;IAC7B;IACA,MAAMwC,WAAW,GAAGhD,gBAAgB,CAACiD,kBAAkB,CAACzC,IAAI,CAAC4B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAClFpB,kBAAkB,CAACgC,WAAW,GAAG,UAAU,GAAG,YAAY,CAAC;IAE3D,IAAI,CAACA,WAAW,EAAE;MAChB5B,QAAQ,CAAC,cAAc,CAAC;IAC1B;EACF,CAAC;EAGD,MAAM8B,0BAA0B,GAAGA,CAAA,KAAM;IAEvC,MAAMC,SAAS,GAAGC,UAAU,CAAC1C,GAAG,CAAC;IACjC,IAAI2C,KAAK,CAACF,SAAS,CAAC,EAAE;MACpB/B,QAAQ,CAAC,8CAA8C,CAAC;MACxD;IACF;;IAEA;IACA,MAAMkC,aAAa,GAAGnD,MAAM,CAACS,OAAO,EAAE,YAAY,CAAC;;IAEnD;IACA,IAAI;MACF,MAAM2C,gBAAgB,GAAGvD,gBAAgB,CAACwD,2BAA2B,CAAC;QACpEhD,IAAI,EAAEA,IAAI;QACVE,GAAG,EAAEyC,SAAS;QACdM,SAAS,EAAEnC,eAAe;QAC1BE,IAAI,EAAE8B,aAAa,CAAE;MACvB,CAAC,CAAC;;MACFpC,UAAU,CAACqC,gBAAgB,CAAC;IAC9B,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACduC,OAAO,CAACvC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,oFAAoF,CAAC;IAChG;EACF,CAAC;EAGD,oBACEf,OAAA;IAAKsD,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBACnCvD,OAAA;MAAKsD,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBvD,OAAA;QAAOwD,OAAO,EAAC,WAAW;QAACF,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9D5D,OAAA;QACE6D,IAAI,EAAC,MAAM;QACXP,SAAS,EAAG,gBAAe5C,eAAgB,EAAE;QAC7CoD,EAAE,EAAC,WAAW;QACdhC,KAAK,EAAE3B,IAAK;QACZ4D,QAAQ,EAAEnC,gBAAiB;QAC3BoC,WAAW,EAAC,YAAY;QACxBC,SAAS,EAAC;MAAI;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,EACDlD,eAAe,KAAK,YAAY,iBAAIV,OAAA;QAAKsD,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvF,CAAC,eACA5D,OAAA;MAAKsD,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACzBvD,OAAA;QAAOwD,OAAO,EAAC,UAAU;QAACF,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnE5D,OAAA;QACE6D,IAAI,EAAC,QAAQ;QACbP,SAAS,EAAC,cAAc;QACxBQ,EAAE,EAAC,UAAU;QACbhC,KAAK,EAAEzB,GAAI;QACX0D,QAAQ,EAAG1C,CAAC,IAAKf,MAAM,CAACe,CAAC,CAACK,MAAM,CAACwC,aAAa,IAAI,EAAE,CAAE,CAAC;QAAA;QACvDF,WAAW,EAAC,qBAAqB;QACjCG,GAAG,EAAC,GAAG,CAAC;QAAA;QACRC,IAAI,EAAC,MAAM,CAAC;QAAA;QACZC,OAAO,EAAC,kBAAe,CAAC;QAAA;QACxBC,SAAS,EAAC,SAAS,CAAC;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN5D,OAAA;MAAKsD,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBvD,OAAA;QAAOwD,OAAO,EAAC,cAAc;QAACF,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACrE5D,OAAA;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN5D,OAAA,CAACH,UAAU;QACT0E,QAAQ,EAAEhE,OAAQ;QAClBwD,QAAQ,EAAE7C,gBAAiB;QAC3BsD,UAAU,EAAC,YAAY;QACvBlB,SAAS,EAAC,cAAc;QACxBQ,EAAE,EAAC;MAAc;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACA5D,OAAA;MAAKsD,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBvD,OAAA;QACEsD,SAAS,EAAC,iBAAiB;QAC3BmB,OAAO,EAAE5B,0BAA2B;QAAAU,QAAA,EACrC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAEL9C,KAAK,iBACJd,OAAA;MAAKsD,SAAS,EAAC,oBAAoB;MAACoB,IAAI,EAAC,OAAO;MAAAnB,QAAA,EAC7CzC;IAAK;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEJhD,OAAO,iBAEFZ,OAAA;MAAKsD,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BvD,OAAA;QACE6D,IAAI,EAAC,MAAM;QACXc,GAAG,EAAE3D,UAAW;QAChBc,KAAK,EAAElB,OAAQ;QACf0C,SAAS,EAAC,cAAc;QACxBsB,QAAQ;MAAA;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACF5D,OAAA;QACEsD,SAAS,EAAC,2BAA2B;QACrCO,IAAI,EAAC,QAAQ;QACbY,OAAO,EAAErD,eAAgB;QAAAmC,QAAA,EAC1B;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT5D,OAAA;QAAKsD,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACrBvD,OAAA;UAAOwD,OAAO,EAAC,SAAS;UAACF,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAE/D5D,OAAA,CAACJ,OAAO;UAACkC,KAAK,EAAElB,OAAQ;UAACd,MAAM,EAAC;QAAS;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAEN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGV;AAAC1D,EAAA,CAhMQD,QAAQ;AAAA4E,EAAA,GAAR5E,QAAQ;AAkMjB,eAAeA,QAAQ;AAAC,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}