{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IbanForm() {\n  _s();\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState('');\n  const [sum, setSum] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n  const handleIbanChange = e => {\n    setIban(e.target.value);\n    setValidationState(''); // Reset validation state when the user changes the input\n    setError(''); // Clear any previous error\n  };\n\n  const validateAndGenerateBarcode = () => {\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban);\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n    if (!isValidIban) {\n      setError('Invalid IBAN');\n      return;\n    }\n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n\n    // Here you can define a hard-coded or randomly generated reference number\n    const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        // Using the hard-coded or randomly generated reference number here\n        date: dueDate\n      });\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: validateAndGenerateBarcode,\n        children: \"Generate Barcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), barcode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Barcode:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-break\",\n        children: barcode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(IbanForm, \"k1ps6Vlz3z4Bw8XMSeeHsvEOBYU=\");\n_c = IbanForm;\nexport default IbanForm;\nvar _c;\n$RefreshReg$(_c, \"IbanForm\");","map":{"version":3,"names":["React","useState","FinnishBankUtils","jsxDEV","_jsxDEV","IbanForm","_s","iban","setIban","sum","setSum","dueDate","setDueDate","validationState","setValidationState","barcode","setBarcode","error","setError","handleIbanChange","e","target","value","validateAndGenerateBarcode","isValidIban","isValidFinnishIBAN","parsedSum","parseFloat","isNaN","referenceNumber","generatedBarcode","formatFinnishVirtualBarCode","reference","date","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\n\nfunction IbanForm() {\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState('');\n  const [sum, setSum] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n\n  const handleIbanChange = (e) => {\n    setIban(e.target.value);\n    setValidationState(''); // Reset validation state when the user changes the input\n    setError(''); // Clear any previous error\n  };\n\n  const validateAndGenerateBarcode = () => {\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban);\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n\n    if (!isValidIban) {\n      setError('Invalid IBAN');\n      return;\n    }\n\n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n\n    // Here you can define a hard-coded or randomly generated reference number\n    const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber, // Using the hard-coded or randomly generated reference number here\n        date: dueDate,\n      });\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      {/* Other input fields remain unchanged */}\n      {/* ... */}\n\n      <div className=\"mb-3\">\n        <button \n          className=\"btn btn-primary\" \n          onClick={validateAndGenerateBarcode}\n        >\n          Generate Barcode\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n\n      {barcode && (\n        <div className=\"mt-3\">\n          <h3>Generated Barcode:</h3>\n          <p className=\"text-break\">{barcode}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default IbanForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}