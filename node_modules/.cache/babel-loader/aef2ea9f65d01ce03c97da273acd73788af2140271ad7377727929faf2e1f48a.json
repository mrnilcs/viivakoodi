{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IbanForm() {\n  _s();\n  // Set default values for demonstration\n  const defaultValues = {\n    iban: 'FI58 1017 1000 0001 22',\n    sum: 4.99,\n    reference: '55958 22432 92671',\n    dueDate: '31.1.2025'\n  };\n  const [iban, setIban] = useState(defaultValues.iban);\n  const [sum, setSum] = useState(defaultValues.sum);\n  const [dueDate, setDueDate] = useState(defaultValues.dueDate);\n  const [referenceNumber, setReferenceNumber] = useState(defaultValues.reference);\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState(''); // New state for user feedback\n\n  const handleIbanChange = e => {\n    setIban(e.target.value);\n    setValidationState(''); // Reset validation state when the user changes the input\n    setError(''); // Clear any previous error\n  };\n\n  const validateAndGenerateBarcode = () => {\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban);\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n    if (!isValidIban) {\n      setError('Invalid IBAN');\n      return;\n    }\n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please enter a valid number.');\n      return;\n    }\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: dueDate // Assumed format: DD.MM.YYYY\n      });\n\n      if (generatedBarcode) {\n        setBarcode(generatedBarcode);\n        setError(''); // Clear any previous error if barcode generation is successful\n      } else {\n        setError('Barcode generation failed. Please check the input values.');\n      }\n    } catch (error) {\n      setError('An error occurred during barcode generation.');\n      console.error(\"Error generating barcode:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger mt-3\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: validateAndGenerateBarcode,\n      children: \"Generate Barcode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), barcode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Barcode:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-break\",\n        children: barcode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(IbanForm, \"B+Guw7O/Y/+5EnzsuS3+uRjJkyk=\");\n_c = IbanForm;\nexport default IbanForm;\nvar _c;\n$RefreshReg$(_c, \"IbanForm\");","map":{"version":3,"names":["React","useState","FinnishBankUtils","jsxDEV","_jsxDEV","IbanForm","_s","defaultValues","iban","sum","reference","dueDate","setIban","setSum","setDueDate","referenceNumber","setReferenceNumber","validationState","setValidationState","barcode","setBarcode","error","setError","handleIbanChange","e","target","value","validateAndGenerateBarcode","isValidIban","isValidFinnishIBAN","parsedSum","parseFloat","isNaN","generatedBarcode","formatFinnishVirtualBarCode","date","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\n\nfunction IbanForm() {\n  // Set default values for demonstration\n  const defaultValues = {\n    iban: 'FI58 1017 1000 0001 22',\n    sum: 4.99,\n    reference: '55958 22432 92671',\n    dueDate: '31.1.2025',\n  };\n\n  const [iban, setIban] = useState(defaultValues.iban);\n  const [sum, setSum] = useState(defaultValues.sum);\n  const [dueDate, setDueDate] = useState(defaultValues.dueDate);\n  const [referenceNumber, setReferenceNumber] = useState(defaultValues.reference);\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState(''); // New state for user feedback\n\n  const handleIbanChange = (e) => {\n    setIban(e.target.value);\n    setValidationState(''); // Reset validation state when the user changes the input\n    setError(''); // Clear any previous error\n  };\n\n  const validateAndGenerateBarcode = () => {\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban);\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n\n    if (!isValidIban) {\n      setError('Invalid IBAN');\n      return;\n    }\n\n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please enter a valid number.');\n      return;\n    }\n\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: dueDate, // Assumed format: DD.MM.YYYY\n      });\n\n      if (generatedBarcode) {\n        setBarcode(generatedBarcode);\n        setError(''); // Clear any previous error if barcode generation is successful\n      } else {\n        setError('Barcode generation failed. Please check the input values.');\n      }\n    } catch (error) {\n      setError('An error occurred during barcode generation.');\n      console.error(\"Error generating barcode:\", error);\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      {/* ... (Other input fields remain unchanged) */}\n\n      {error && (\n        <div className=\"alert alert-danger mt-3\">\n          {error}\n        </div>\n      )}\n\n      <button \n        className=\"btn btn-primary\" \n        onClick={validateAndGenerateBarcode}\n      >\n        Generate Barcode\n      </button>\n\n      {barcode && (\n        <div className=\"mt-3\">\n          <h3>Generated Barcode:</h3>\n          <p className=\"text-break\">{barcode}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default IbanForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}