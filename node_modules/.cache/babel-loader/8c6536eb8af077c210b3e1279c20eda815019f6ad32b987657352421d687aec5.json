{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define('FinnishBankUtils', ['module'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod);\n    global.FinnishBankUtils = mod.exports;\n  }\n})(this, function (module) {\n  'use strict';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n  var REF_NUMBER_MULTIPLIERS = [7, 3, 1],\n    FINNISH_REF_NUMBER_REGEX = /^(\\d{4,20}|RF\\d{6,22})$/i,\n    FINNISH_IBAN_REGEX = /^FI\\d{16}$/,\n    FINNISH_VIRTUAL_BAR_CODE_REGEX = /^[45]\\d{53}$/,\n    FINNISH_DATE_REGEX = /^(\\d\\d?)\\.(\\d\\d?)\\.(\\d{4})$/,\n    IBAN_OFFSET_FROM_ASCIICODE = -55;\n  function removeAllWhiteSpaces(str) {\n    return str.replace(/\\s+/g, '');\n  }\n  function removeLeadingZeros(str) {\n    return str.replace(/^0+/, '');\n  }\n  function lettersToNumbers(str) {\n    return [].concat(_toConsumableArray(str)).map(function (char) {\n      if (/\\D/.test(char)) {\n        return String(char.charCodeAt(0) + IBAN_OFFSET_FROM_ASCIICODE);\n      }\n      return char;\n    }).join('');\n  }\n  function reverseString(str) {\n    return [].concat(_toConsumableArray(str)).reverse().join('');\n  }\n  function removeStringFromEnd(str, strToRemove) {\n    if (str.substr(-strToRemove.length) === strToRemove) {\n      return str.substr(0, str.length - strToRemove.length);\n    }\n    return str;\n  }\n  function leftPadString(str, char, pad) {\n    return (char.repeat(pad) + str).substr(-Math.max(str.length, pad));\n  }\n  function randomNumberWithLength(length) {\n    var randomNumber = '';\n    for (var i = 0; i < length; i++) {\n      randomNumber += Math.floor(Math.random() * 9) + 1; // 1...9, because a real number can't begin with zero\n    }\n\n    return parseInt(randomNumber, 10);\n  }\n\n  /** JS number type can't handle the long account numbers... */\n  function modForLargeNumber(base, divisor) {\n    var dividend = '';\n    for (var i = 0; i < base.length; i++) {\n      dividend = parseInt(dividend + base[i], 10);\n      if (dividend >= divisor) {\n        var remainder = dividend % divisor;\n        if (i == base.length - 1) {\n          return remainder;\n        } else {\n          dividend = remainder;\n        }\n      }\n    }\n    return parseInt(dividend, 10);\n  }\n\n  /** Luhn mod 10 checksum algorithm https://en.wikipedia.org/wiki/Luhn_algorithm */\n  function luhnMod10(value) {\n    var sum = 0;\n    for (var i = 0; i < value.length; i++) {\n      var multiplier = i % 2 === 0 ? 2 : 1;\n      var add = multiplier * parseInt(value[i], 10);\n      if (add >= 10) {\n        add -= 9;\n      }\n      sum += add;\n    }\n    var mod10 = sum % 10;\n    return mod10 === 0 ? mod10 : 10 - mod10;\n  }\n  function isValidFinnishBBAN(accountNumber) {\n    accountNumber = removeAllWhiteSpaces(accountNumber);\n    var localAccountNumberWithoutCheckSum = accountNumber.substr(4, 13),\n      luhnChecksumChar = parseInt(accountNumber.substr(17, 1), 10);\n    return luhnMod10(localAccountNumberWithoutCheckSum) === luhnChecksumChar;\n  }\n  function isValidIBAN(iban) {\n    iban = removeAllWhiteSpaces(iban.toUpperCase());\n    var prefixAndChecksum = iban.substr(0, 4),\n      number = iban.substr(4);\n    return modForLargeNumber(lettersToNumbers(number + prefixAndChecksum), 97) === 1;\n  }\n  function isValidFinnishDate(string) {\n    if (!string || typeof string != 'string' || !FINNISH_DATE_REGEX.test(string)) {\n      return false;\n    }\n    var _string$match$slice$m = string.match(FINNISH_DATE_REGEX).slice(1, 4).map(Number),\n      _string$match$slice$m2 = _slicedToArray(_string$match$slice$m, 3),\n      day = _string$match$slice$m2[0],\n      month = _string$match$slice$m2[1],\n      year = _string$match$slice$m2[2],\n      date = new Date(year, month - 1, day);\n    return year == date.getFullYear() && month - 1 == date.getMonth() && day == date.getDate();\n  }\n  function sliceVirtualBarCode(barCode) {\n    var version = Number(barCode.substr(0, 1));\n    var slices = void 0;\n    if (version === 4) {\n      slices = [1, 16, 6, 2, 3, 20, 2, 2, 2];\n    } else if (version === 5) {\n      slices = [1, 16, 6, 2, 0, 23, 2, 2, 2];\n    }\n    var index = 0;\n    return slices.map(function (length) {\n      var slice = barCode.substr(index, length);\n      index += length;\n      return slice;\n    });\n  }\n  var FinnishBankUtils = {\n    isValidFinnishRefNumber: function isValidFinnishRefNumber(refNumber) {\n      //  Sanity and format check, which allows to make safe assumptions on the format.\n      if (!refNumber || typeof refNumber !== 'string' || !FINNISH_REF_NUMBER_REGEX.test(removeAllWhiteSpaces(refNumber.toUpperCase()))) {\n        return false;\n      }\n      refNumber = removeAllWhiteSpaces(refNumber.toUpperCase());\n      if (/^RF/.test(refNumber)) {\n        if (!isValidIBAN(refNumber)) {\n          return false;\n        }\n        refNumber = refNumber.substr(4);\n      } else {\n        refNumber = removeLeadingZeros(refNumber);\n      }\n      var reversedRefNumber = reverseString(refNumber),\n        providedChecksumNumber = parseInt(reversedRefNumber.charAt(0));\n      refNumber = reversedRefNumber.substr(1);\n      var checksum = 0,\n        checksumNumber = void 0;\n      for (var i = 0; i < refNumber.length; i++) {\n        checksum += REF_NUMBER_MULTIPLIERS[i % REF_NUMBER_MULTIPLIERS.length] * parseInt(refNumber.charAt(i));\n      }\n      checksumNumber = 10 - checksum % 10;\n      if (checksumNumber === 10) {\n        checksumNumber = 0;\n      }\n      return checksumNumber === providedChecksumNumber;\n    },\n    isValidFinnishIBAN: function isValidFinnishIBAN(accountNumber) {\n      if (!accountNumber || typeof accountNumber !== 'string' || !FINNISH_IBAN_REGEX.test(removeAllWhiteSpaces(accountNumber.toUpperCase()))) {\n        return false;\n      }\n      return isValidFinnishBBAN(accountNumber) && isValidIBAN(accountNumber);\n    },\n    formatFinnishRefNumber: function formatFinnishRefNumber(refNumber) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n      if (this.isValidFinnishRefNumber(refNumber)) {\n        refNumber = removeAllWhiteSpaces(refNumber.toUpperCase());\n        if (/^RF/.test(refNumber)) {\n          refNumber = refNumber.substr(0, 4) + removeLeadingZeros(refNumber.substr(4));\n          return removeStringFromEnd(refNumber.replace(/.{4}/g, '$&' + separator), separator);\n        } else {\n          refNumber = removeLeadingZeros(refNumber);\n          return reverseString(removeStringFromEnd(reverseString(refNumber).replace(/.{5}/g, '$&' + separator), separator));\n        }\n      }\n    },\n    formatFinnishIBAN: function formatFinnishIBAN(accountNumber) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n      if (this.isValidFinnishIBAN(accountNumber)) {\n        accountNumber = removeAllWhiteSpaces(accountNumber.toUpperCase());\n        return removeStringFromEnd(accountNumber.replace(/.{4}/g, '$&' + separator), separator);\n      }\n    },\n    generateFinnishRefNumber: function generateFinnishRefNumber(initial) {\n      var refNumber = typeof initial === 'string' ? removeAllWhiteSpaces(initial) : randomNumberWithLength(9).toString(),\n        reversedRefNumber = reverseString(refNumber);\n      var checksum = 0,\n        checksumNumber = void 0;\n      for (var i = 0; i < reversedRefNumber.length; i++) {\n        checksum += REF_NUMBER_MULTIPLIERS[i % REF_NUMBER_MULTIPLIERS.length] * parseInt(reversedRefNumber.charAt(i));\n      }\n      checksumNumber = 10 - checksum % 10;\n      if (checksumNumber === 10) {\n        checksumNumber = 0;\n      }\n      return refNumber + checksumNumber;\n    },\n    generateFinnishIBAN: function generateFinnishIBAN() {\n      var defaultCheckDigit = '00',\n        danskeBankOffice = '800026',\n        //  Use a real bank and office for simplicity\n        countryCodeInDigits = lettersToNumbers('FI'),\n        bankAccount = randomNumberWithLength(7),\n        localAccountNumber = danskeBankOffice + bankAccount + luhnMod10(danskeBankOffice + bankAccount),\n        accountNumberCandidate = localAccountNumber + countryCodeInDigits + defaultCheckDigit,\n        checkDigit = 98 - modForLargeNumber(accountNumberCandidate, 97),\n        checkChars = checkDigit >= 10 ? checkDigit.toString() : '0' + checkDigit;\n      return 'FI' + checkChars + localAccountNumber;\n    },\n    parseFinnishVirtualBarCode: function parseFinnishVirtualBarCode(barCode) {\n      if (!barCode || typeof barCode != 'string' || !FINNISH_VIRTUAL_BAR_CODE_REGEX.test(barCode)) {\n        return false;\n      }\n      var _sliceVirtualBarCode = sliceVirtualBarCode(barCode),\n        _sliceVirtualBarCode2 = _slicedToArray(_sliceVirtualBarCode, 9),\n        version = _sliceVirtualBarCode2[0],\n        iban = _sliceVirtualBarCode2[1],\n        euros = _sliceVirtualBarCode2[2],\n        cents = _sliceVirtualBarCode2[3],\n        reserve = _sliceVirtualBarCode2[4],\n        reference = _sliceVirtualBarCode2[5],\n        year = _sliceVirtualBarCode2[6],\n        month = _sliceVirtualBarCode2[7],\n        day = _sliceVirtualBarCode2[8];\n      version = Number(version);\n      iban = this.formatFinnishIBAN('FI' + iban);\n      var sum = Number(euros) + Number(cents) / 100;\n      if (version === 5) {\n        reference = 'RF' + reference.substr(0, 2) + removeLeadingZeros(reference.substr(2));\n      }\n      reference = this.formatFinnishRefNumber(reference);\n      var date = void 0;\n      day = Number(day);\n      month = Number(month);\n      if (day > 0 && month > 0) {\n        date = day + '.' + month + '.20' + year;\n      }\n      return {\n        iban: iban,\n        sum: sum,\n        reference: reference,\n        date: date\n      };\n    },\n    formatFinnishVirtualBarCode: function formatFinnishVirtualBarCode(object) {\n      if (!object || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) != 'object' || !this.isValidFinnishIBAN(object.iban) || typeof object.sum != 'number' || object.sum < 0 || object.sum > 999999.99 || object.sum != Number(object.sum.toFixed(2)) || !this.isValidFinnishRefNumber(object.reference) || object.date != undefined && !isValidFinnishDate(object.date)) {\n        return false;\n      }\n      var iban = removeAllWhiteSpaces(object.iban),\n        euros = Math.floor(object.sum),\n        cents = object.sum * 100 - euros * 100,\n        reference = removeAllWhiteSpaces(object.reference),\n        day = 0,\n        month = 0,\n        year = 0,\n        version = /^RF/.test(reference) ? 5 : 4;\n      if (object.date) {\n        var _object$date$match$sl = object.date.match(FINNISH_DATE_REGEX).slice(1, 4).map(Number);\n        var _object$date$match$sl2 = _slicedToArray(_object$date$match$sl, 3);\n        day = _object$date$match$sl2[0];\n        month = _object$date$match$sl2[1];\n        year = _object$date$match$sl2[2];\n      }\n      if (version == 5) {\n        reference = reference.replace(/^RF/, '');\n        reference = reference.substr(0, 2) + leftPadString(reference.substr(2), '0', 21);\n      }\n      return String(version) + iban.replace(/^FI/, '') + leftPadString(String(euros), '0', 6) + leftPadString(String(cents), '0', 2) + leftPadString(reference, '0', 23) + leftPadString(String(year).substr(-2), '0', 2) + leftPadString(String(month), '0', 2) + leftPadString(String(day), '0', 2);\n    }\n  };\n  module.exports = Object.freeze(FinnishBankUtils);\n});","map":{"version":3,"names":["global","factory","define","amd","exports","module","mod","FinnishBankUtils","_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_toConsumableArray","arr2","from","REF_NUMBER_MULTIPLIERS","FINNISH_REF_NUMBER_REGEX","FINNISH_IBAN_REGEX","FINNISH_VIRTUAL_BAR_CODE_REGEX","FINNISH_DATE_REGEX","IBAN_OFFSET_FROM_ASCIICODE","removeAllWhiteSpaces","str","replace","removeLeadingZeros","lettersToNumbers","concat","map","char","test","String","charCodeAt","join","reverseString","reverse","removeStringFromEnd","strToRemove","substr","leftPadString","pad","repeat","Math","max","randomNumberWithLength","randomNumber","floor","random","parseInt","modForLargeNumber","base","divisor","dividend","remainder","luhnMod10","sum","multiplier","add","mod10","isValidFinnishBBAN","accountNumber","localAccountNumberWithoutCheckSum","luhnChecksumChar","isValidIBAN","iban","toUpperCase","prefixAndChecksum","number","isValidFinnishDate","string","_string$match$slice$m","match","slice","Number","_string$match$slice$m2","day","month","year","date","Date","getFullYear","getMonth","getDate","sliceVirtualBarCode","barCode","version","slices","index","isValidFinnishRefNumber","refNumber","reversedRefNumber","providedChecksumNumber","charAt","checksum","checksumNumber","isValidFinnishIBAN","formatFinnishRefNumber","separator","arguments","formatFinnishIBAN","generateFinnishRefNumber","initial","toString","generateFinnishIBAN","defaultCheckDigit","danskeBankOffice","countryCodeInDigits","bankAccount","localAccountNumber","accountNumberCandidate","checkDigit","checkChars","parseFinnishVirtualBarCode","_sliceVirtualBarCode","_sliceVirtualBarCode2","euros","cents","reserve","reference","formatFinnishVirtualBarCode","object","toFixed","_object$date$match$sl","_object$date$match$sl2","freeze"],"sources":["/Users/admin/Documents/Attach/Web/React/viivakoodi/node_modules/finnish-bank-utils/dist/finnish-bank-utils.js"],"sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define('FinnishBankUtils', ['module'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod);\n    global.FinnishBankUtils = mod.exports;\n  }\n})(this, function (module) {\n  'use strict';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var REF_NUMBER_MULTIPLIERS = [7, 3, 1],\n      FINNISH_REF_NUMBER_REGEX = /^(\\d{4,20}|RF\\d{6,22})$/i,\n      FINNISH_IBAN_REGEX = /^FI\\d{16}$/,\n      FINNISH_VIRTUAL_BAR_CODE_REGEX = /^[45]\\d{53}$/,\n      FINNISH_DATE_REGEX = /^(\\d\\d?)\\.(\\d\\d?)\\.(\\d{4})$/,\n      IBAN_OFFSET_FROM_ASCIICODE = -55;\n\n  function removeAllWhiteSpaces(str) {\n    return str.replace(/\\s+/g, '');\n  }\n\n  function removeLeadingZeros(str) {\n    return str.replace(/^0+/, '');\n  }\n\n  function lettersToNumbers(str) {\n    return [].concat(_toConsumableArray(str)).map(function (char) {\n      if (/\\D/.test(char)) {\n        return String(char.charCodeAt(0) + IBAN_OFFSET_FROM_ASCIICODE);\n      }\n      return char;\n    }).join('');\n  }\n\n  function reverseString(str) {\n    return [].concat(_toConsumableArray(str)).reverse().join('');\n  }\n\n  function removeStringFromEnd(str, strToRemove) {\n    if (str.substr(-strToRemove.length) === strToRemove) {\n      return str.substr(0, str.length - strToRemove.length);\n    }\n    return str;\n  }\n\n  function leftPadString(str, char, pad) {\n    return (char.repeat(pad) + str).substr(-Math.max(str.length, pad));\n  }\n\n  function randomNumberWithLength(length) {\n    var randomNumber = '';\n    for (var i = 0; i < length; i++) {\n      randomNumber += Math.floor(Math.random() * 9) + 1; // 1...9, because a real number can't begin with zero\n    }\n    return parseInt(randomNumber, 10);\n  }\n\n  /** JS number type can't handle the long account numbers... */\n  function modForLargeNumber(base, divisor) {\n    var dividend = '';\n    for (var i = 0; i < base.length; i++) {\n      dividend = parseInt(dividend + base[i], 10);\n      if (dividend >= divisor) {\n        var remainder = dividend % divisor;\n        if (i == base.length - 1) {\n          return remainder;\n        } else {\n          dividend = remainder;\n        }\n      }\n    }\n    return parseInt(dividend, 10);\n  }\n\n  /** Luhn mod 10 checksum algorithm https://en.wikipedia.org/wiki/Luhn_algorithm */\n  function luhnMod10(value) {\n    var sum = 0;\n    for (var i = 0; i < value.length; i++) {\n      var multiplier = i % 2 === 0 ? 2 : 1;\n      var add = multiplier * parseInt(value[i], 10);\n      if (add >= 10) {\n        add -= 9;\n      }\n      sum += add;\n    }\n    var mod10 = sum % 10;\n    return mod10 === 0 ? mod10 : 10 - mod10;\n  }\n\n  function isValidFinnishBBAN(accountNumber) {\n    accountNumber = removeAllWhiteSpaces(accountNumber);\n    var localAccountNumberWithoutCheckSum = accountNumber.substr(4, 13),\n        luhnChecksumChar = parseInt(accountNumber.substr(17, 1), 10);\n\n    return luhnMod10(localAccountNumberWithoutCheckSum) === luhnChecksumChar;\n  }\n\n  function isValidIBAN(iban) {\n    iban = removeAllWhiteSpaces(iban.toUpperCase());\n    var prefixAndChecksum = iban.substr(0, 4),\n        number = iban.substr(4);\n\n    return modForLargeNumber(lettersToNumbers(number + prefixAndChecksum), 97) === 1;\n  }\n\n  function isValidFinnishDate(string) {\n    if (!string || typeof string != 'string' || !FINNISH_DATE_REGEX.test(string)) {\n      return false;\n    }\n\n    var _string$match$slice$m = string.match(FINNISH_DATE_REGEX).slice(1, 4).map(Number),\n        _string$match$slice$m2 = _slicedToArray(_string$match$slice$m, 3),\n        day = _string$match$slice$m2[0],\n        month = _string$match$slice$m2[1],\n        year = _string$match$slice$m2[2],\n        date = new Date(year, month - 1, day);\n\n    return year == date.getFullYear() && month - 1 == date.getMonth() && day == date.getDate();\n  }\n\n  function sliceVirtualBarCode(barCode) {\n    var version = Number(barCode.substr(0, 1));\n    var slices = void 0;\n    if (version === 4) {\n      slices = [1, 16, 6, 2, 3, 20, 2, 2, 2];\n    } else if (version === 5) {\n      slices = [1, 16, 6, 2, 0, 23, 2, 2, 2];\n    }\n    var index = 0;\n    return slices.map(function (length) {\n      var slice = barCode.substr(index, length);\n      index += length;\n      return slice;\n    });\n  }\n\n  var FinnishBankUtils = {\n    isValidFinnishRefNumber: function isValidFinnishRefNumber(refNumber) {\n      //  Sanity and format check, which allows to make safe assumptions on the format.\n      if (!refNumber || typeof refNumber !== 'string' || !FINNISH_REF_NUMBER_REGEX.test(removeAllWhiteSpaces(refNumber.toUpperCase()))) {\n        return false;\n      }\n\n      refNumber = removeAllWhiteSpaces(refNumber.toUpperCase());\n\n      if (/^RF/.test(refNumber)) {\n        if (!isValidIBAN(refNumber)) {\n          return false;\n        }\n        refNumber = refNumber.substr(4);\n      } else {\n        refNumber = removeLeadingZeros(refNumber);\n      }\n\n      var reversedRefNumber = reverseString(refNumber),\n          providedChecksumNumber = parseInt(reversedRefNumber.charAt(0));\n\n      refNumber = reversedRefNumber.substr(1);\n\n      var checksum = 0,\n          checksumNumber = void 0;\n\n      for (var i = 0; i < refNumber.length; i++) {\n        checksum += REF_NUMBER_MULTIPLIERS[i % REF_NUMBER_MULTIPLIERS.length] * parseInt(refNumber.charAt(i));\n      }\n\n      checksumNumber = 10 - checksum % 10;\n\n      if (checksumNumber === 10) {\n        checksumNumber = 0;\n      }\n\n      return checksumNumber === providedChecksumNumber;\n    },\n    isValidFinnishIBAN: function isValidFinnishIBAN(accountNumber) {\n      if (!accountNumber || typeof accountNumber !== 'string' || !FINNISH_IBAN_REGEX.test(removeAllWhiteSpaces(accountNumber.toUpperCase()))) {\n        return false;\n      }\n\n      return isValidFinnishBBAN(accountNumber) && isValidIBAN(accountNumber);\n    },\n    formatFinnishRefNumber: function formatFinnishRefNumber(refNumber) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n\n      if (this.isValidFinnishRefNumber(refNumber)) {\n        refNumber = removeAllWhiteSpaces(refNumber.toUpperCase());\n        if (/^RF/.test(refNumber)) {\n          refNumber = refNumber.substr(0, 4) + removeLeadingZeros(refNumber.substr(4));\n          return removeStringFromEnd(refNumber.replace(/.{4}/g, '$&' + separator), separator);\n        } else {\n          refNumber = removeLeadingZeros(refNumber);\n          return reverseString(removeStringFromEnd(reverseString(refNumber).replace(/.{5}/g, '$&' + separator), separator));\n        }\n      }\n    },\n    formatFinnishIBAN: function formatFinnishIBAN(accountNumber) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n\n      if (this.isValidFinnishIBAN(accountNumber)) {\n        accountNumber = removeAllWhiteSpaces(accountNumber.toUpperCase());\n        return removeStringFromEnd(accountNumber.replace(/.{4}/g, '$&' + separator), separator);\n      }\n    },\n    generateFinnishRefNumber: function generateFinnishRefNumber(initial) {\n      var refNumber = typeof initial === 'string' ? removeAllWhiteSpaces(initial) : randomNumberWithLength(9).toString(),\n          reversedRefNumber = reverseString(refNumber);\n\n      var checksum = 0,\n          checksumNumber = void 0;\n\n      for (var i = 0; i < reversedRefNumber.length; i++) {\n        checksum += REF_NUMBER_MULTIPLIERS[i % REF_NUMBER_MULTIPLIERS.length] * parseInt(reversedRefNumber.charAt(i));\n      }\n\n      checksumNumber = 10 - checksum % 10;\n\n      if (checksumNumber === 10) {\n        checksumNumber = 0;\n      }\n\n      return refNumber + checksumNumber;\n    },\n    generateFinnishIBAN: function generateFinnishIBAN() {\n      var defaultCheckDigit = '00',\n          danskeBankOffice = '800026',\n          //  Use a real bank and office for simplicity\n      countryCodeInDigits = lettersToNumbers('FI'),\n          bankAccount = randomNumberWithLength(7),\n          localAccountNumber = danskeBankOffice + bankAccount + luhnMod10(danskeBankOffice + bankAccount),\n          accountNumberCandidate = localAccountNumber + countryCodeInDigits + defaultCheckDigit,\n          checkDigit = 98 - modForLargeNumber(accountNumberCandidate, 97),\n          checkChars = checkDigit >= 10 ? checkDigit.toString() : '0' + checkDigit;\n\n      return 'FI' + checkChars + localAccountNumber;\n    },\n    parseFinnishVirtualBarCode: function parseFinnishVirtualBarCode(barCode) {\n      if (!barCode || typeof barCode != 'string' || !FINNISH_VIRTUAL_BAR_CODE_REGEX.test(barCode)) {\n        return false;\n      }\n\n      var _sliceVirtualBarCode = sliceVirtualBarCode(barCode),\n          _sliceVirtualBarCode2 = _slicedToArray(_sliceVirtualBarCode, 9),\n          version = _sliceVirtualBarCode2[0],\n          iban = _sliceVirtualBarCode2[1],\n          euros = _sliceVirtualBarCode2[2],\n          cents = _sliceVirtualBarCode2[3],\n          reserve = _sliceVirtualBarCode2[4],\n          reference = _sliceVirtualBarCode2[5],\n          year = _sliceVirtualBarCode2[6],\n          month = _sliceVirtualBarCode2[7],\n          day = _sliceVirtualBarCode2[8];\n\n      version = Number(version);\n\n      iban = this.formatFinnishIBAN('FI' + iban);\n      var sum = Number(euros) + Number(cents) / 100;\n\n      if (version === 5) {\n        reference = 'RF' + reference.substr(0, 2) + removeLeadingZeros(reference.substr(2));\n      }\n      reference = this.formatFinnishRefNumber(reference);\n\n      var date = void 0;\n      day = Number(day);\n      month = Number(month);\n      if (day > 0 && month > 0) {\n        date = day + '.' + month + '.20' + year;\n      }\n\n      return { iban: iban, sum: sum, reference: reference, date: date };\n    },\n    formatFinnishVirtualBarCode: function formatFinnishVirtualBarCode(object) {\n      if (!object || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) != 'object' || !this.isValidFinnishIBAN(object.iban) || typeof object.sum != 'number' || object.sum < 0 || object.sum > 999999.99 || object.sum != Number(object.sum.toFixed(2)) || !this.isValidFinnishRefNumber(object.reference) || object.date != undefined && !isValidFinnishDate(object.date)) {\n        return false;\n      }\n\n      var iban = removeAllWhiteSpaces(object.iban),\n          euros = Math.floor(object.sum),\n          cents = object.sum * 100 - euros * 100,\n          reference = removeAllWhiteSpaces(object.reference),\n          day = 0,\n          month = 0,\n          year = 0,\n          version = /^RF/.test(reference) ? 5 : 4;\n\n      if (object.date) {\n        var _object$date$match$sl = object.date.match(FINNISH_DATE_REGEX).slice(1, 4).map(Number);\n\n        var _object$date$match$sl2 = _slicedToArray(_object$date$match$sl, 3);\n\n        day = _object$date$match$sl2[0];\n        month = _object$date$match$sl2[1];\n        year = _object$date$match$sl2[2];\n      }\n\n      if (version == 5) {\n        reference = reference.replace(/^RF/, '');\n        reference = reference.substr(0, 2) + leftPadString(reference.substr(2), '0', 21);\n      }\n\n      return String(version) + iban.replace(/^FI/, '') + leftPadString(String(euros), '0', 6) + leftPadString(String(cents), '0', 2) + leftPadString(reference, '0', 23) + leftPadString(String(year).substr(-2), '0', 2) + leftPadString(String(month), '0', 2) + leftPadString(String(day), '0', 2);\n    }\n  };\n\n  module.exports = Object.freeze(FinnishBankUtils);\n});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}