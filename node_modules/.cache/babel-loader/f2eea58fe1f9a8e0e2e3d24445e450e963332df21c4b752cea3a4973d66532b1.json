{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport Barcode from 'react-barcode';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { format } from 'date-fns';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst copyToClipboard = () => {\n  const el = document.createElement('textarea');\n  el.value = barcode;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  alert('Barcode copied to clipboard!');\n};\nfunction IbanForm() {\n  _s();\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState(localStorage.getItem('iban') || '');\n  const [sum, setSum] = useState(localStorage.getItem('sum') || '');\n  const [dueDate, setDueDate] = useState(localStorage.getItem('dueDate') ? new Date(localStorage.getItem('dueDate')) : new Date());\n  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n  const barcodeRef = useRef(null);\n  const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n  useEffect(() => {\n    // Save input field values to localStorage whenever they change\n    localStorage.setItem('iban', iban);\n    localStorage.setItem('sum', sum);\n    localStorage.setItem('dueDate', dueDate.toISOString());\n  }, [iban, sum, dueDate]);\n  const handleDateChange = date => {\n    setDueDate(date);\n  };\n  const copyToClipboard = e => {\n    barcodeRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    // Optionally, you can show a tooltip/popover to indicate the text was copied.\n  };\n\n  const handleIbanChange = e => {\n    const input = e.target.value;\n    // Only keep alphanumeric characters and spaces (for better user experience)\n    let value = input.replace(/[^A-Za-z0-9 ]/g, '');\n\n    // Split the value into groups of 4 characters separated by spaces\n    const match = value.split(' ').join('').match(/.{1,4}/g);\n    let formattedValue = match ? match.join(' ') : '';\n\n    // Check if we should trigger validation. We do this by counting the actual characters entered,\n    // ignoring spaces, to know when the user has entered a complete IBAN.\n    const actualLength = formattedValue.replace(/ /g, '').length;\n    setIban(formattedValue);\n    setError(''); // Clear any previous errors\n\n    if (actualLength === 18) {\n      // Checking the length of the IBAN without spaces\n      validateIban(formattedValue); // You could validate the IBAN here\n    } else {\n      setValidationState(''); // Reset validation state if the length requirement is not met\n    }\n  };\n\n  const validateIban = iban => {\n    // Implement your validation logic here\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban.replace(/\\s/g, '')); // validation without spaces\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n  };\n  const validateAndGenerateBarcode = () => {\n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n\n    // Format the date in the format \"dd.MM.yyyy\"\n    const formattedDate = format(dueDate, 'dd.MM.yyyy');\n\n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: formattedDate // pass the formatted date string here instead of the Date object\n      });\n\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ibanField\",\n        className: \"form-label\",\n        children: \"Tilinumero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: `form-control ${validationState}`,\n        id: \"ibanField\",\n        value: iban,\n        onChange: handleIbanChange,\n        placeholder: \"FI29 1220 3500 6578 75\",\n        maxLength: \"22\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sumField\",\n        className: \"form-label\",\n        children: \"Summa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        id: \"sumField\",\n        value: sum,\n        onChange: e => setSum(e.target.valueAsNumber || '') // Ensuring we're working with a number, and prevent null on deletion\n        ,\n        placeholder: \"12.50\",\n        min: \"0\" // Prevents negative amounts\n        ,\n        step: \"0.01\" // Allows cents to be entered\n        ,\n        pattern: \"\\\\d+(\\\\.\\\\d{2})?\" // This pattern demands at least the cents part to be entered, you can remove it if you want more flexibility\n        ,\n        inputMode: \"decimal\" // Brings up the numeric keypad on supported devices, useful for monetary values\n        ,\n        maxLength: \"6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"dueDateField\",\n        className: \"form-label\",\n        children: \"Er\\xE4p\\xE4iv\\xE4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: dueDate,\n        onChange: handleDateChange,\n        dateFormat: \"dd.MM.yyyy\",\n        className: \"form-control\",\n        id: \"dueDateField\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: validateAndGenerateBarcode,\n        children: \"Luo Viivakoodi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), barcode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: barcodeRef,\n        value: barcode,\n        className: \"form-control\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group-append\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-secondary\",\n          type: \"button\",\n          onClick: copyToClipboard,\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"barcode-container\",\n          children: /*#__PURE__*/_jsxDEV(Barcode, {\n            value: barcode,\n            format: \"CODE128\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(IbanForm, \"JOdQSg5vmBcYEqjmtvPo4MzIcGQ=\");\n_c = IbanForm;\nexport default IbanForm;\nvar _c;\n$RefreshReg$(_c, \"IbanForm\");","map":{"version":3,"names":["React","useState","useRef","useEffect","FinnishBankUtils","Barcode","DatePicker","format","jsxDEV","_jsxDEV","copyToClipboard","el","document","createElement","value","barcode","body","appendChild","select","execCommand","removeChild","alert","IbanForm","_s","iban","setIban","localStorage","getItem","sum","setSum","dueDate","setDueDate","Date","validationState","setValidationState","setBarcode","error","setError","barcodeRef","referenceNumber","setItem","toISOString","handleDateChange","date","e","current","target","focus","handleIbanChange","input","replace","match","split","join","formattedValue","actualLength","length","validateIban","isValidIban","isValidFinnishIBAN","validateAndGenerateBarcode","parsedSum","parseFloat","isNaN","formattedDate","generatedBarcode","formatFinnishVirtualBarCode","reference","console","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","maxLength","valueAsNumber","min","step","pattern","inputMode","selected","dateFormat","onClick","role","ref","readOnly","_c","$RefreshReg$"],"sources":["/Users/admin/Documents/Attach/Web/React/viivakoodi/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FinnishBankUtils from 'finnish-bank-utils'; // Make sure this import is correct\nimport Barcode from 'react-barcode';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { format } from 'date-fns';\nimport './App.css';\n\n\nconst copyToClipboard = () => {\n  const el = document.createElement('textarea');\n  el.value = barcode;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  alert('Barcode copied to clipboard!');\n};\n\n\nfunction IbanForm() {\n  // Initialize states with empty values for user input\n  const [iban, setIban] = useState(localStorage.getItem('iban') || '');\n  const [sum, setSum] = useState(localStorage.getItem('sum') || '');\n  const [dueDate, setDueDate] = useState(\n    localStorage.getItem('dueDate')\n      ? new Date(localStorage.getItem('dueDate'))\n      : new Date()\n  );  const [validationState, setValidationState] = useState('');\n  const [barcode, setBarcode] = useState('');\n  const [error, setError] = useState('');\n  const barcodeRef = useRef(null);\n  const referenceNumber = '55958 22432 94671'; // Example of a hard-coded valid reference number\n\n  useEffect(() => {\n    // Save input field values to localStorage whenever they change\n    localStorage.setItem('iban', iban);\n    localStorage.setItem('sum', sum);\n    localStorage.setItem('dueDate', dueDate.toISOString());\n  }, [iban, sum, dueDate]);\n\n\n  const handleDateChange = (date) => {\n    setDueDate(date);\n  };\n\n\n  const copyToClipboard = (e) => {\n    barcodeRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    // Optionally, you can show a tooltip/popover to indicate the text was copied.\n  };\n\n  const handleIbanChange = (e) => {\n    const input = e.target.value;\n    // Only keep alphanumeric characters and spaces (for better user experience)\n    let value = input.replace(/[^A-Za-z0-9 ]/g, '');\n  \n    // Split the value into groups of 4 characters separated by spaces\n    const match = value.split(' ').join('').match(/.{1,4}/g);\n    \n    let formattedValue = match ? match.join(' ') : '';\n  \n    // Check if we should trigger validation. We do this by counting the actual characters entered,\n    // ignoring spaces, to know when the user has entered a complete IBAN.\n    const actualLength = formattedValue.replace(/ /g, '').length;\n  \n    setIban(formattedValue);\n    setError(''); // Clear any previous errors\n  \n    if (actualLength === 18) { // Checking the length of the IBAN without spaces\n      validateIban(formattedValue); // You could validate the IBAN here\n    } else {\n      setValidationState(''); // Reset validation state if the length requirement is not met\n    }\n  };\n  \n  \n  \n  const validateIban = (iban) => {\n    // Implement your validation logic here\n    const isValidIban = FinnishBankUtils.isValidFinnishIBAN(iban.replace(/\\s/g, '')); // validation without spaces\n    setValidationState(isValidIban ? 'is-valid' : 'is-invalid');\n  \n   \n  };\n  \n\n  const validateAndGenerateBarcode = () => {\n  \n    const parsedSum = parseFloat(sum);\n    if (isNaN(parsedSum)) {\n      setError('Invalid sum. Please provide a numeric value.');\n      return;\n    }\n  \n    // Format the date in the format \"dd.MM.yyyy\"\n    const formattedDate = format(dueDate, 'dd.MM.yyyy');\n  \n    // Generate barcode\n    try {\n      const generatedBarcode = FinnishBankUtils.formatFinnishVirtualBarCode({\n        iban: iban,\n        sum: parsedSum,\n        reference: referenceNumber,\n        date: formattedDate, // pass the formatted date string here instead of the Date object\n      });\n      setBarcode(generatedBarcode);\n    } catch (error) {\n      console.error(\"Error generating barcode:\", error);\n      setError('There was an error generating the barcode. Please check your inputs and try again.');\n    }\n  };\n\n\n  return (\n    <div className=\"container mt-5\">\n<div className=\"mb-3\">\n  <label htmlFor=\"ibanField\" className=\"form-label\">Tilinumero</label>\n  <input \n    type=\"text\"\n    className={`form-control ${validationState}`}\n    id=\"ibanField\"\n    value={iban}\n    onChange={handleIbanChange}\n    placeholder=\"FI29 1220 3500 6578 75\"\n    maxLength=\"22\" \n  />\n</div>\n      <div className=\"mb-3\">\n  <label htmlFor=\"sumField\" className=\"form-label\">Summa</label>\n  <input \n    type=\"number\" \n    className=\"form-control\"\n    id=\"sumField\"\n    value={sum}\n    onChange={(e) => setSum(e.target.valueAsNumber || '')} // Ensuring we're working with a number, and prevent null on deletion\n    placeholder=\"12.50\"\n    min=\"0\" // Prevents negative amounts\n    step=\"0.01\" // Allows cents to be entered\n    pattern=\"\\d+(\\.\\d{2})?\" // This pattern demands at least the cents part to be entered, you can remove it if you want more flexibility\n    inputMode=\"decimal\" // Brings up the numeric keypad on supported devices, useful for monetary values\n    maxLength=\"6\" \n\n  />\n</div>\n<div className=\"mb-3\">\n  <label htmlFor=\"dueDateField\" className=\"form-label\">Eräpäivä</label>\n  <br />\n  <DatePicker\n    selected={dueDate}\n    onChange={handleDateChange}\n    dateFormat=\"dd.MM.yyyy\"\n    className=\"form-control\"\n    id=\"dueDateField\"\n  />\n</div>\n      <div className=\"mb-3\">\n        <button \n          className=\"btn btn-primary\" \n          onClick={validateAndGenerateBarcode}\n        >\n          Luo Viivakoodi\n        </button>\n      </div>\n  \n      {error && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {error}\n        </div>\n      )}\n  \n  {barcode && (\n    \n        <div className=\"input-group mb-3\">\n          <input \n            type=\"text\"\n            ref={barcodeRef}\n            value={barcode}\n            className=\"form-control\"\n            readOnly\n          />\n  <div className=\"input-group-append\">\n    <button\n      className=\"btn btn-outline-secondary\"\n      type=\"button\"\n      onClick={copyToClipboard}\n    >\n      Copy\n    </button>\n  </div>\n          <div className=\"mb-3\">\n          <div className=\"barcode-container\">\n          <Barcode value={barcode} format=\"CODE128\" />\n          </div>\n\n        </div>\n        </div>\n        \n      )}\n    </div>\n  );\n  \n}\n\nexport default IbanForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}